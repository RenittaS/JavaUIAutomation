    Примеры абсолютных путей:
    html/body/div/header/div/div[2]/nav/ul/li[1]/a
    html/body/div/div/div/div/div[2]/div[2]/div/div[2]/h3/a
    html/body/div/div/div/div/div[2]/div[3]/div/div[2]/p/a

    Примеры относительных путей:
    nav/ul/li[1]/a
    div[2]/div/div[2]/h3/a
    div[3]//div[2]/p/a

    ancestor - предок
    parent - непосредственный предок
    descendant - потомок
    child - непосредственный потомок
    siblings - сестринские элементы
    following - следующие
    preceding - предшествующие

-----------------------------------------
    Выбрать все элементы ( <div> ) на первой позиции, у которых есть дочерний элемент ( <form> )
    div[1][form]

    Выбрать все элементы ( <ul> ), у которых дочерний элемент ( <li> ) находиться на пятой позиции. Сделать
     рекурсивный спуск к тегу ( <a> ).
    ul[li[5]]//a

    Выбрать все элементы ( <div> ), у которых дочерним является тег ( <h3> ); Выбрать дочерний элемент ( <p> ) тега
     ( <div> ).
    div[h3]/p

    Выбрать все элементы ( <div> ) которые находятся на первой позиции, в которых присутствует тег ( <nav> ).
     Сделать рекурсивный спуск до тега ( <ul> ) в котором присутствует тег ( <li> ), который находится на 6ой
     позиции; Выбрать дочерний элемент ( <а> ).
    div[1][nav]//ul[li[6]]/a

    Выбрать все элементы(*), у которых дочерним является (<div>) и который находится на 3й позиции.
    */div[3]

    Выбрать все элементы(*), у которых присутствует тег (<h3>).
    *[h3]

    Выбрать все элементы ( <ul> ). Выбрать все элементы(*), у которых дочерним является тег ( <a> ).
    ul/*/a

    Выбрать все элементы ( <div> ) в которых есть атрибут @class="container".
    div[@class="container"]

    Выбрать все элементы ( <div> ), в которых есть атрибут @id.
    div[@id]

    Выбрать все элементы ( <div> ) в которых есть атрибут @class='circle'; Выбрать дочерний элемент (<i>) с классом
     @class="icon-wrench".
    div[@class='circle']i[@class="icon-wrench"]

    Выбрать все элементы (*) в которых есть атрибуты (@*); Сделать рекурсивный спуск; Выбрать все элементы ( <a> ),
     в которых присутствует атрибут @rel .
    *[@*]//a[@rel]

    Выбрать все элементы ( <a> ); Вернуться на один уровень выше (..).
    a/..

    Выбрать все элементы ( <a> ); Вернуться на два уровня выше;Выбрать элемент ( <div> ), в котором присутствует
     атрибут @id.
    a/../../div[@id]

    Выбрать все элементы ( <h3> ) у которых дочерним является тег ( <a> ); Вернуться на один уровень выше; Выбрать
     тег ( <p> ); Выбрать его дочерний элемент ( <a> ) .
    h3[a]/../p/a

    Сгруппировать все элементы ( <li> ); Выбрать 10-ый элемент из коллекции.
     (//li)[10]

    Выбрать все элементы ( <div> );
    Выбрать дочерний элемент ( <div> ), который находится на второй позиции, у
    которого есть атрибут @id и атрибут @class;
    Сделать рекурсивный спуск к элементу ( <i> );
    Подняться на два уровня выше;
    Выбрать тег ( <div> ), в котором есть тег ( <h3> );
    Сгруппировать все найденные элементы;
    Выбрать 2ой элемент из коллекции;
    Сделать рекурсивный спуск к элементу ( <p> );
    Выбрать дочерний элемент ( <a> ) в котором содержится атрибут @href.
     (//div/div[2][@id][@class]//i/../../div[h3])[2]//p/a[@href]


    Выбрать все элементы ( <a> ); Вернуть всех предков <div> у которых дочерним является элемент ( <h3> ).
    a/ancestor::div[h3]

    Выбрать все элементы ( <a> ); Вернуть всех предков ( <div> ); Выбрать все элементы ( <li> ); Вернуть всех
     предков ( <ul> ).
    a/ancestor::div//li/ancestor::ul

    Выбрать все элементы (<ul>); Выбрать дочерние элементы ( <li> ); Вернуть всех предков (<div>), включая текущий
     элемент.
    ul/li/ancestor-or-self::div

    Выбрать все элементы ( <span> ), в которых есть элемент ( <i> ); Выбрать всех предков ( <div> ) включая текущий
     элемент, в которых содержится элемент.( <nav> )
    span[i]//ancestor-or-self::div[nav]

    Выбрать все элементы ( <div> ); Вернуть всех потомков ( <ul> ) элемента ( <div> ).
    div/child::ul

    Выбрать все элементы ( <div> ); Сделать рекурсивный спуск; Вернуть всех потомков ( <div> ), которые находятся на
     третей позиции.
    div//child::div[3]

    Выбрать все элементы ( <div> ); Вернуть всех потомком ( <div> ), которые имеют атрибут @id; Сделать рекурсивный
     спуск и выбрать все элементы ( <div> ), в которых присутствует элемент ( <ul> ).
    div/child::div[@id]//div[ul]

    Выбрать все элементы ( <div> ) в которых есть атрибут id='footer'; Сделать рекурсивный спуск к элементу ( <div>
     ), который находится на 3й позиции и у которого есть атрибут class='four columns' ; Вернуть всех потомков
     элемента ( <div> ).
    div[@id='footer']//div[3][@class='four columns']/descendant::*

    Выбрать все элементы ( <ul> ); Вернуть всех потомков элемента ( <ul> ).
    ul/descendant::*

    Выбрать все элементы ( <ul> ); Вернуть всех потомков ( <li> ) элемента ( <ul> );
    ul/child::li

    Выбрать все элементы ( <ul> ), у которых предком является элемент ( <nav> ), и у которых есть элемент ( <li> ),
     который находится на 6ой позиции; Вернуть всех потомков ( <a> ) элемента ( <ul> );
    ul[ancestor::nav][li[6]]/descendant::a

    Вернуть всех потомков элемента ( <div> ) с атрибутом class =’ *** ’, и сам элемент ( <div> ).
    div[@class =’ *** ’]/descendant-or-self::*

    Выбрать все элементы ( <div> ); Вернуть всех потомков, включая текущий, в которых содержится атрибут @style
    div/descendant-or-self::*[@style]

    Выбрать элемент ( <div> ) с атрибутом @id='text2'; Вернуть не обработанное множество всех элементов ниже текущего;
    div[@id='text2']/following::*

    Выбрать элемент ( <div> ) с атрибутом @id='footer'; Вернуть не обработанное множество элементов ( <div> ) с
     атрибутом @class='container' ниже текущего; Выбрать дочерний элемент ( <div> ) на первой позиции; Вернуть не
     обработанное множество элементов.
    div[@id='footer']/following::div[@class='container']/div[1]/following::*

    Выбрать все элементы ( <div> ), в которых есть тег (<p>) и тег ( <h3> )с атрибутом @class="headline"; Выбрать
     тег ( <h3> ); Вернуть множество элементов ( <p> ), на том же уровне что и тег (<h3>).
    div[p][h3[@class="headline"]]/h3/following-sibling::p

    Выбрать все элементы ( <header> ); Вернуть все элементы ( <div> ) которые находятся на второй позиции, на том
     же уровне что и элемент ( <header> );  Сделать рекурсивный спуск; Вернуть множество элементов на том же уровне
     что и ( <div> ); Сделать рекурсивный спуск; Выбрать все элементы ( <h3> ).
    header/following-sibling::div[2]//following-sibling::*//h3

    Выбрать все элементы ( <p> ); Вернуться на один уровень выше, к элементу ( <div> ).
    p/parent::div

    Выбрать все элементы ( <a> ); Подняться на один уровень выше к элементу ( <li> ) у которого есть атрибут @id;
     Подняться на один уровень выше; Подняться на один уровень выше к элементу ( <li> ) у которого есть элемент (
     <a> ) с классом @class="sf-with-ul".
    a/parent::li[@id]/../parent::li[a[@class="sf-with-ul"]]
    или
    a/parent::li[@id]/parent::*/parent::li[a[@class="sf-with-ul"]] -

    Вернуть элемент ( <div> ) с атрибутом @id="footer-bottom"; Вернуть все необработанные элементы выше текущего.
    div[@id="footer-bottom"]/preceding::*

    Вернуть элемент ( <div> ) с атрибутом @id="footer-bottom"; Вернуть все необработанные элементы ( <div> ) у
     которого есть элемент ( <p> ) с потомком ( <img> ); Вернуть элемент ( <a> ).
    div[@id="footer-bottom"]/preceding::div[p/img]//a

    Выбрать все элементы ( <div> ) с атрибутом @id="tab4"; Вернуть множество элементов ( <div> ) у которого есть
     элемент ( <p> ) с потомком ( <a> ); Сделать рекурсивный спуск; Вернуть все элементы ( <a> ) которые находятся
     на первой позиции.
    div[@id="tab4"]/preceding-sibling::div[p/a]//a[1]

    Выбрать все элементы ( <selection> ) с атрибутом @class="comments-sec"; Вернуть множество элементов ( <div> ), у
     которого есть элемент ( <h2> ); Вернуть элемент ( <div> ); Вернуть элемент ( <div> ); Вернуть множество
     элементов ( <div> ) у которого есть атрибут @class="columns sixteen".
    selection[comments-sec]//preceding-sibling::div[h2]/div/div/preceding-sibling::div[@class="columns sixteen"]

    Выбрать все элементы ( <li> );
    Выбрать всех потомком ( <img> ) не сокращенный синтаксис;
    Подняться на один уровень выше;
    Подняться на один уровень выше не сокращенный синтаксис;
    Подняться на один уровень выше не сокращенный синтаксис;
    Сделать рекурсивный спуск к элементу ( <li> ) который находится на третьей позиции;
    Выбрать всех предков ;
    Сделать рекурсивный спуск к элементу ( <div> ) в котором есть элемент ( <li> ) c потомком ( <img> );
    Сделать рекурсивный спуск к элементу ( <li> ) который находится на третьей позиции;
    Выбрать потомка ( <img> ) элемента ( <li> ).
    li/child::img/../parent::*/parent::*//li[3]/ancestor::*//div[div//li/img]//li[3]/child::img

    Выбрать все элементы в которых содержится текст "Read more".
    *[text()='Read more']

    Выбрать все элементы ( <p> ) в которых есть элемент ( <a> ) с текстом "Read more".
    p[a[text()='Read more']]

    Выбрать весь текст, который содержится в элементах ( <div> ).
    div/text()

    Выбрать все элементы которые находятся на второй позиции.
    *[position()=2]

    Выбрать все элементы ( <div> ) у которых есть любые элементы на 5ой позиции
    div[*[position()=5]] или //div[*[5]]

    Выбрать все элементы ( <div> ) которые находятся на 3ей позиции; Сделать рекурсивный спуск; Выбрать все
     элементы ( <div> ) которые стоят на 2 второй позиции и выше, и содержат атрибут @class; Сделать рекурсивный
     спуск.; Выбрать ввесь текст; Подняться на один уровень выше.
    div[3]//div[position()>=2][@class]//text()/..

    Вернуть все элементы ( <li> ) которые находятся на последней позиции.
    li[last()]

    Вернуть все элементы ( <div> ) в которых есть элементы ( <nav> ); Сделать рекурсивный спуск; Выбрать элемент (
     <li> ) который находиться на последней позиции.
    div[nav]//li[last()]

    Выбрать все элементы ( <div> ) в которых содержится ровно 3 элемента ( <div> )
    div[count(div)=3]

    Выбрать все элементы ( <div> ) в которых есть атрибут @class="container"; Сделать рекурсивный спуск; Выбрать
     все элементы в которых количество любых элементов равно 8.
    div[@class="container"]//*[count[*]=8]

    Выбрать элементы с id=”footer”, id=”logo”.
    *[id('footer')][id('logo')]

    Выбрать элемент ( <div> ) в котором содержится @class='one-third alpha columns'; Сделать рекурсивный спуск;
     Выбрать элемент ( <p> ). Вернуть текстовое содержимое элемента ( <p> ) .
    string(div[@class='one-third alpha columns']//p)

    Выбрать все элементы ( <div> ) в которых присутствует атрибут @class='list-4'; Выбрать все элементы ( <ul> ) в
     которых количество элементов ( <li> ) равно 4; Вернуть весь текст элемента ( <ul> ).
    string(div[@class='list-4']/ul[count(li)=4])

    Выбрать все элементы ( <h3> ) в которых содержится текст 'How to start'.
    h3[contains(text(), ''How to start)]

    Выбрать все элементы ( <li> ) в атрибуте @id которых содержится текст 'menu-item'; Сделать рекурсивный спуск;
     Выбрать все элементы ( <i> ).
    li[contains(@id, 'menu-item')]//i

    Выбрать все элементы ( <div> ) в атрибуте @class которых содержится текст 'featured'; Выбрать элемент ( <h3> );
     Выбрать элемент ( <a> ) в котором содержится текст 'Plugins'.
    div[contains(@class, 'featured')]/h3/a[contains(text(), 'Plugins')]

    Забрать элемент ( <a> ) в котором содержится текст объедененных 3х строк 'Continuous', ' ', 'integration'.
    a[contains(text(), concat('Continuous',' ', 'integration'))]

    Выбрать элементы ( <li> ) в которых содержится атрибут @id с текстом из объедененных 3х строк 'menu-item-1478'.
    li[contains(@id, concat('menu-', 'item-', '1478'))]

    Вернуть все элементы, длина текста которых больше 10 символов
    *[string-length( text() ) >10]

    Выбрать все элементы, у которых длина текста, который содержится в элементе ( <p> ), больше 150 символов.
    *[string-length(p [text()] ) >150]

    Выбрать все элементы, у которых длина текста, который содержится в элементе ( <p> ), больше 150 символов.
    Выбрать все элементы ( <a> ), длина текста в которых равна 7.
    *[string-length(p [text()] ) >150]/a[string-length( text() ) =7]

    Выбрать все элементы, в которых содержится атрибут @id с текстом ‘aq-block-880-2’; Текст ‘aq-block-880-2’
    обрезать 6 символов, начиная с 8 символа .
    *[contains(@id, substring(‘aq-block-880-2’, 8, 6))]

    Выбрать все элементы ( <a> ) которые начинаются с текста 'View'
    a[starts-with(text(), 'View')]

    Выбрать все элементы ( <div> ) в которых содержатся атрибуты @id или @class
    div[@id or @class]

    Выбрать все элементы в которых содержится атрибут @id='header' или @id='footer’; Сделать рекурсивный спуск до
     элемента ( <div> ) в котором содержатся атрибуты @class='four columns' или @class='columns'; Выбрать все
     элементы у которых есть атрибут @id='text2' или @id='text7'
    *[@id='header' or @id='footer’]//div[@class='four columns' or @class='columns']/*[@id='text2' or @id='text7']

    Выбрать элементы ( <div> ) в которых есть элементы ( <h3> ) и ( <p> ).
    div[h3 and p]

    Выбрать все элементы ( <div> ) в которых содержатся атрибуты @id и @style. Сделать рекурсивный спуск до элемента
     ( <a> ) в котором содержатся атрибуты @rel='home' or @title.
    div[@id and @style]//a[@rel='home' or @title]

    Выбрать все элементы ( <div> ) в которых содержится атрибут @class="container"; Выбрать все элементы ( <div> )
     в котором @class="eight columns" возвращает истину; Сделать рекурсивный спуск и выбрать все элементы ( <i> ).
    div[@class="container"]/div[@class="eight columns"=true()]//i

    Выбрать все элементы у которых есть атрибут @id='header'; Сделать рекурсивный спуск к элементу ( <li> );
     Выбрать все элементы ( <a> ) кроме тех в которых присутствует текст "S".
    *[@id='header']//li/a[contains(text(), 'S')=false()]